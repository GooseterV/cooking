const INGREDIENTS={Vegetables:["Tomato","Onion","Carrot","Potato","Cucumber","Leek","Garlic","Red Potato","Purple Potato","Yellow Tomato","Lettuce","Cabbage","Red Cabbage","Pumpkin","Cucumbers","Red Bell Pepper","Orange Bell Pepper","Yellow Bell Pepper","JalapeÃ±o","Habanero","Ginger Root","Green Bell Pepper","Radish","Asparagus","Brussel Sprout","Beetroot","Corn","Mushroom","Chili Pepper","Eggplant","Horseradish Root","Zucchini"],Fruits:["Strawberry","Mango","Orange","Blueberry","Cherry","Pineapple","Tangerine","Apple","Banana","Kiwi","Lime","Lemon","Honey Mango","Blackberry","Raspberry"],Meats:["Duck Breast","T-Bone Steak","Beef Patty","Turkey Patty","Steak","Chicken Breast","Chicken Thigh","Chicken Wing","Pork Tenderloin","Turkey Bacon","Bacon","Turkey","Roast Beef","Ground Beef"],Seafood:["Oyster","Cod","Salmon","Lake Whitefish","Pufferfish","Anchovy","Sardine","Trout","Scallop","Shrimp","Swordfish"],Herbs:["Dill","Cilantro","Rosemary","Thyme","Parsley","Basil","Lavender","Bay Leaf","Chives","Sage","Scallion"],Carbs:["White Bread","Sourdough","Rye Bread","Whole Wheat Bread","Ziti","Penne","Rigatoni","Top Burger Bun","Bottom Burger Bun","Hotdog Bun","Olive Bread","Baguette","Italian Bread","Hardtack","Challah Bread"],Dairy:["Cheddar Cheese","Goat Cheese","Gouda","Swiss Cheese","Mozarrella","Gorgonzola","Feta","Butter","Cream Cheese","Whole Milk","Low-Fat Milk","Skim Milk","Goat Milk"],Liquids:["Almond Milk","Coconut Milk","Root Beer","Red Wine","Vodka","White Wine","Rice Wine","Gin","Rum","Vinegar","Sunflower Oil","Vegetable Oil","Olive Oil","Water"],Seasonings:["Flour","Granulated Sugar","Powdered Sugar","Brown Sugar","Almond Flour","Wheat Flour","Cinnamon Sugar","Black Pepper","Salt","Allspice","Cayenne Pepper Seasoning","Chili Powder","Red Pepper","Paprika"],Other:["Egg","Apple Butter","Walnut Butter","Almond Butter","Grape Jelly","Strawberry Jelly","Peanut Butter"]},INGREDIENT_IMAGES={Almond:"src/almond.png",Anchovy:"src/anchovy.png",Apple:"src/apple.png","Apple Butter":"src/appleButter.png","Apple Butter Liquid":"src/appleButterLiquid.png",Asparagus:"src/asparagus.png",Avocado:"src/avocado.png",Bacon:"src/bacon.png",Banana:"src/banana.png",Basil:"src/basil.png",Bay:"src/bay.png","Beef Chuck":"src/beefChuck.png","Beef Patty":"src/beefPatty.png",Beetroot:"src/beetroot.png",Blackberry:"src/blackberry.png","Black Pepper":"src/blackPepper.png",Blueberry:"src/blueberry.png",Bottle:"src/bottle.png",Box:"src/box.png",Bread:"src/bread.png",Broccoli:"src/broccoli.png","Brussels Sprouts":"src/brusselsSprouts.png","Burger Bun":"src/burgerBun.png","Burger Patty":"src/burgerPatty.png","Burger And Fries":"src/burger_and_fries.png",Butter:"src/butter.png","Button Mushroom":"src/buttonMushroom.png",Cabbage:"src/cabbage.png",Cantaloupe:"src/cantaloupe.png",Carrot:"src/carrot.png",Cashew:"src/cashew.png","Challah Bread":"src/challahBread.png",Charcoal:"src/charcoal.png",Cheddar:"src/cheddar.png",Cherry:"src/cherry.png","Chicken Breast":"src/chickenBreast.png","Chicken Leg":"src/chickenLeg.png","Chicken Wing":"src/chickenWing.png","Chicken Wings And Sweet Potatos":"src/chicken_wings_and_sweet_potatos.png","Chili Pepper":"src/chiliPepper.png",Chives:"src/chives.png",Cilantro:"src/cilantro.png","Cinnamon Stick":"src/cinnamonStick.png",Cocoa:"src/cocoa.png",Coconut:"src/coconut.png",Cod:"src/cod.png",Cog:"src/cog.png","Cooking Pot":"src/cooking_pot.png","Cooking Pot Bubbles":"src/cooking_pot_bubbles.png","Cooking Pot Bubbles 1":"src/cooking_pot_bubbles_1.png","Cooking Pot Bubbles 2":"src/cooking_pot_bubbles_2.png","Corn Cob":"src/cornCob.png",Cucumber:"src/cucumber.png",Dill:"src/dill.png",Dollar:"src/dollar.png","Duck Breast":"src/duckBreast.png",Durian:"src/durian.png",Egg:"src/egg.png",Eggplant:"src/eggplant.png","Empty Pan":"src/empty_pan.png","Empty Plate Large":"src/empty_plate_large.png","English Muffin":"src/englishMuffin.png",Feta:"src/feta.png",Fig:"src/fig.png",Flooring:"src/flooring.png","Fried Egg":"src/friedEgg.png",Fusilli:"src/fusilli.png",Garlic:"src/garlic.png",Gear:"src/gear.png",Gin:"src/gin.png",Ginger:"src/ginger.png","Gin Liquid":"src/ginLiquid.png",Glass:"src/glass.png","Glowing Blue Patty":"src/glowing_blue_patty.png","Goat Cheese":"src/goatCheese.png",Gorgonzola:"src/gorgonzola.png",Gouda:"src/gouda.png","Grandmas Ashes":"src/grandmas_ashes.png",Grape:"src/grape.png","Green Bell Pepper":"src/greenBellPepper.png",Guava:"src/guava.png",Habanero:"src/habanero.png",Ham:"src/ham.png",Hardtack:"src/hardtack.png",Honeydew:"src/honeydew.png",Horseradish:"src/horseradish.png",Jalapeno:"src/jalapeno.png",Kiwi:"src/kiwi.png","Lake Whitefish":"src/lakeWhitefish.png","Lamb Chop":"src/lambChop.png",Lasagna:"src/lasagna.png",Lemon:"src/lemon.png",Lime:"src/lime.png",Lobster:"src/lobster.png",Mango:"src/mango.png","Meal Button":"src/meal_button.png","Milk Jug":"src/milkJug.png",Milk:"src/milkJug.png","Milk Liquid":"src/milkLiquid.png","Mint Leaf":"src/mintLeaf.png",Mozzarella:"src/mozzarella.png",Onion:"src/onion.png",Orange:"src/orange.png","Orange Bell Pepper":"src/orangeBellPepper.png","Orange Juice Liquid":"src/orange_juice_liquid.png",Oregano:"src/oregano.png",Oyster:"src/oyster.png",Pancake:"src/pancake.png",Pancetta:"src/pancetta.png","Pan With Egg":"src/pan_with_egg.png",Parmesan:"src/parmesan.png",Parsley:"src/parsley.png","Parsley Root":"src/parsleyRoot.png",Parsnip:"src/parsnip.png",Peach:"src/peach.png",Peanut:"src/peanut.png",Pear:"src/pear.png",Pecan:"src/pecan.png",Penne:"src/penne.png",Pepper:"src/pepper.png","Pepper Shaker":"src/pepper_shaker.png",Persimmon:"src/persimmon.png",Pineapple:"src/pineapple.png","Placeholder Dish":"src/placeholder_dish.png","Red Bell Pepper":"src/redBellPepper.png","Red Liquid":"src/redLiquid.png","Red Wine":"src/redWine.png","Red Wine Liquid":"src/redWineLiquid.png","Root Beer":"src/rootBeer.png","Root Beer Liquid":"src/rootBeerLiquid.png",Rum:"src/rum.png","Rum Liquid":"src/rumLiquid.png",Salmon:"src/salmon.png",Salt:"src/salt.png","Salt Shaker":"src/salt_shaker.png",Scallion:"src/scallion.png",Scallop:"src/scallop.png","Skim Milk":"src/skimMilk.png",Steak:"src/steak.png","Steak And Fries":"src/steak_and_fries.png","Swiss Cheese":"src/swissCheese.png",Table:"src/table.png","Tbone Steak":"src/tboneSteak.png",Tiling:"src/tiling.png","Tiling 2":"src/tiling_2.png","Toast Peanutbutter And Jelly":"src/toast_peanutbutter_and_jelly.png","Toggle Pan Button":"src/toggle_pan_button.png",Tomato:"src/tomato.png",Transparent:"src/transparent.png",Trout:"src/trout.png","Turkey Patty":"src/turkey_patty.png",Unknown:"src/unknown.png",Vodka:"src/vodka.png","Vodka Liquid":"src/vodkaLiquid.png",Water:"src/water.png","Water Liquid":"src/waterLiquid.png",Watermelon:"src/watermelon.png","White Wine":"src/whiteWine.png","White Wine Liquid":"src/whiteWineLiquid.png","Whole Milk":"src/wholeMilk.png","Yellow Bell Pepper":"src/yellowBellPepper.png",Ziti:"src/ziti.png",Zucchini:"src/zucchini.png",Vinegar:"src/vinegar.png","Vinegar Liquid":"src/vinegarLiquid.png","Rice Wine":"src/riceWine.png","Rice Wine Liquid":"src/riceWineLiquid.png","Oil Liquid":"src/oilLiquid.png","Sunflower Oil":"src/sunflowerOil.png"},CATGEGORIES=Object.keys(INGREDIENTS),MEALS=[new Meal({Name:"Burger and Fries",Ingredients:[new MealIngredient({Name:"Potato",Method:"Fried",Pieces:20,Amount:300,CookPercent:100}),new MealIngredient({Name:"Beef Patty",Method:"Grilled",Pieces:1,Amount:235,CookPercent:100}),new MealIngredient({Name:"Tomato",Method:"Slightly Grilled",Pieces:1,Amount:100,CookPercent:25}),new MealIngredient({Name:"Cheddar Cheese",Method:"Barely Grilled",Pieces:1,Amount:50,CookPercent:5}),new MealIngredient({Name:"Top Burger Bun",Method:"Raw",Pieces:1,Amount:150,CookPercent:0}),new MealIngredient({Ingredient:"Bottom Burger Bun",Method:"Raw",Pieces:1,Amount:150,CookPercent:0})],Price:5}),new Meal({Name:"Steak and Fries",Ingredients:[new MealIngredient({Name:"Steak",Method:"Cooked",Pieces:1,Amount:300,CookPercent:100}),new MealIngredient({Name:"Potato",Method:"Fried",Pieces:15,Amount:275,CookPercent:100})],Price:19})];let INGREDIENTS_ACTIVE=!1,ACTIVE_CATEGORIES=[],ACTIVE_INGREDIENT=null,PAN_ON=!1,PAN_ON_INTERVAL,PAN_OFF_INTERVAL,POT_ON=!1,POT_ON_INTERVAL,POT_OFF_INTERVAL,MEAL_INGREDIENTS=[],CONFIG_ON=!1,CONFIG,RESTAURANT=new Restaurant,SERVER_SOCKET,SERVER_CONNECTION_ACTIVE=!1,SERVER_DATA={potOn:!1,panOn:!1,panContents:"null",potContents:[]};const sleep=ms=>new Promise(resolve=>setTimeout(resolve,ms));async function addFood(name,grams){const food={name:name,density:grams};INGREDIENTS.push(food)}async function addMeal(name,ingredients){const meal=new Meal({Name:name,Ingredients:ingredients});MEALS.push(meal)}async function*getIngredients(food){for(let ingredient of food.ingredients)yield ingredient}async function handleIngredientEvent(evt){handleIngredientClick(evt.currentTarget.ingredient)}async function handleCategoryEvent(evt){showIngredientsForCategory(evt.currentTarget.category,evt.currentTarget.isactive)}async function addIngredient(ingredient){alert(`Added ingredient: ${ingredient}`)}async function showIngredientsForCategory(category){const catIngredients=document.getElementById(`${category}-contents`);ACTIVE_CATEGORIES.includes(category)?ACTIVE_CATEGORIES.includes(category)&&(catIngredients.style="display:none;",ACTIVE_CATEGORIES=ACTIVE_CATEGORIES.filter(cat=>{})):(catIngredients.style="",ACTIVE_CATEGORIES.push(category))}async function showIngredients(){const ingredientsList=document.getElementById("ingredient-list");if(INGREDIENTS_ACTIVE)INGREDIENTS_ACTIVE&&(ingredientsList.style="display:none;",ingredientsList.innerHTML="",INGREDIENTS_ACTIVE=!1);else{ingredientsList.style="display:flex;";for(let category of CATGEGORIES){let categoryIngredients=document.createElement("div"),categoryElement=document.createElement("span");categoryIngredients.style="display:none;",categoryIngredients.className+="category-contents",categoryElement.className+="ingredient-button category",categoryIngredients.id=`${category}-contents`,categoryElement.innerText=category,categoryElement.addEventListener("click",handleCategoryEvent),categoryElement.category=category,categoryElement.isactive=!1;for(let ingredient of INGREDIENTS[category]){let ingredientElement=document.createElement("span");ingredientElement.className+="ingredient-button",ingredientElement.innerText=ingredient,ingredientElement.addEventListener("click",handleIngredientEvent),ingredientElement.ingredient=ingredient,categoryIngredients.appendChild(ingredientElement)}ingredientsList.appendChild(categoryElement),ingredientsList.appendChild(categoryIngredients)}INGREDIENTS_ACTIVE=!0}}async function selectIngredient(ingredient){ACTIVE_INGREDIENT=new Ingredient(null,ingredient,67,0,"raw"),alert(`Ingredient Selected: ${ACTIVE_INGREDIENT.name}`)}async function handleIngredientClick(ingredient){null!==ACTIVE_INGREDIENT&&ACTIVE_INGREDIENT.name===ingredient?(ACTIVE_INGREDIENT=null,alert(`Ingredient Deselected: ${ingredient}`)):(null!==ACTIVE_INGREDIENT&&ACTIVE_INGREDIENT.name,selectIngredient(ingredient))}async function addIngredientToPan(ingredient){const panElement=document.getElementById("pan-holder"),panDetails=document.getElementById("pan-details");let temp=parseInt(panElement.getAttribute("data-temperature"));ACTIVE_INGREDIENT=null,Object.keys(INGREDIENT_IMAGES).includes(ingredient.name)||INGREDIENTS.Liquids.includes(ingredient.name)?("Egg"===ingredient.name?document.getElementById("pan-contents").src=INGREDIENT_IMAGES["Fried Egg"]:INGREDIENTS.Liquids.includes(ingredient.name)?Object.keys(INGREDIENT_IMAGES).includes(`${ingredient.name} Liquid`)?document.getElementById("pan-contents").src=INGREDIENT_IMAGES[`${ingredient.name} Liquid`]:ingredient.name.includes("Milk")?document.getElementById("pan-contents").src="src/milkLiquid.png":ingredient.name.includes("Oil")?document.getElementById("pan-contents").src="src/oilLiquid.png":document.getElementById("pan-contents").src="src/unknown.png":document.getElementById("pan-contents").src=INGREDIENT_IMAGES[ingredient.name],panDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tFull Pan (${ingredient.name})\n\t\t`):document.getElementById("pan-contents").src="src/unknown.png",panElement.setAttribute("data-contents",JSON.stringify(ingredient.asJson())),SERVER_DATA.panContents=ingredient.asJson()}async function addIngredientToPot(ingred){const potElement=document.getElementById("pot-holder"),potDetails=document.getElementById("pot-details"),on=POT_ON?"On":"Off";let ingredients=potElement.getAttribute("data-contents"),temp=parseInt(potElement.getAttribute("data-temperature")),ingredient=ingred.asJson();if("null"===ingredients&&"[]"===ingredients||"null"===ingredients)if("null"!==ingredients&&"[]"!==ingredients||"null"!==ingredients){let ingr=[];ingr.push(ingredient),potElement.setAttribute("data-contents",JSON.stringify(ingr))}else{let ingr=[];ingr.push(ingredient),potElement.setAttribute("data-contents",JSON.stringify(ingr))}else{let ingr=JSON.parse(ingredients);ingr.push(ingredient),potElement.setAttribute("data-contents",JSON.stringify(ingr))}ACTIVE_INGREDIENT=null,SERVER_DATA.potContents=JSON.parse(potElement.getAttribute("data-contents")),potDetails.innerHTML=`\n\t\t${temp}Â° (${on}) <img id="pot-toggle" src="src/toggle_pan_button.png" alt="Pan Toggle Button" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tFull Pot \n\t`}async function removePanContents(){const panElement=document.getElementById("pan-holder"),panDetails=document.getElementById("pan-details");let temp=parseInt(panElement.getAttribute("data-temperature"));const on=PAN_ON?"On":"Off";panElement.setAttribute("data-contents","null"),document.getElementById("pan-contents").src="src/transparent.png",panDetails.innerHTML=`\n\t${temp}Â° (${on}) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t<br>\n\tEmpty Pan\n\t`}async function removePotContents(){const potElement=document.getElementById("pot-holder"),potDetails=document.getElementById("pot-details"),on=POT_ON?"On":"Off";let temp=parseInt(potElement.getAttribute("data-temperature"));potElement.setAttribute("data-contents","[]"),potDetails.innerHTML=`\n\t${temp}Â° (${on}) <img id="pot-toggle" src="src/toggle_pan_button.png" alt="Pot Toggle Button" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t<br>\n\tEmpty Pot\n\t`}async function handlePanClick(contents){const panElement=document.getElementById("pan-holder"),panDetails=document.getElementById("pan-details");let temp=parseInt(panElement.getAttribute("data-temperature"));null!==ACTIVE_INGREDIENT&&"null"!==ACTIVE_INGREDIENT||"null"===contents?"null"===contents&&null!==ACTIVE_INGREDIENT?addIngredientToPan(ACTIVE_INGREDIENT):"null"!==contents&&null!==ACTIVE_INGREDIENT&&alert("Pan is already full!"):(ACTIVE_INGREDIENT=new Ingredient(null,null,null,null,null).fromJson(JSON.parse(contents)),panElement.setAttribute("data-contents","null"),document.getElementById("pan-contents").src="src/transparent.png",turnOffPan(),SERVER_DATA.panContents="null",panDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tEmpty Pan\n\t\t`),SERVER_CONNECTION_ACTIVE&&await updateServer()}async function handlePotClick(contents){const potElement=document.getElementById("pot-holder"),potDetails=document.getElementById("pot-details"),on=POT_ON?"On":"Off";let temp=parseInt(potElement.getAttribute("data-temperature")),ic=JSON.parse(contents);if(null===ACTIVE_INGREDIENT&&"null"!==contents&&null!==ic&&ic!==[]&&"[]"!==contents){ACTIVE_INGREDIENT=new Ingredient(null,null,null,null,null).fromJson(ic[ic.length-1]),ic.pop(),SERVER_DATA.potContents=ic,potElement.setAttribute("data-contents",JSON.stringify(ic));let empty=ic.length>0?"Full":"Empty";potDetails.innerHTML=`\n\t\t${temp}Â° (${on}) <img id="pot-toggle" src="src/toggle_pan_button.png" alt="Pot Toggle Button" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\t${empty} Pot\n\t\t`}else null!==ACTIVE_INGREDIENT&&addIngredientToPot(ACTIVE_INGREDIENT);SERVER_CONNECTION_ACTIVE&&await updateServer()}async function increasePotTemperature(){const potDetails=document.getElementById("pot-details"),potElement=document.getElementById("pot-holder"),potContents=potElement.getAttribute("data-contents"),on=POT_ON?"On":"Off";let temp=parseInt(potElement.getAttribute("data-temperature"));if(potElement.setAttribute("data-temperature",String(temp+1)),"null"!==potContents)if(temp>500&&CONFIG.charcoalization&&"[]"!=potContents)potElement.setAttribute("data-contents",JSON.stringify([{name:"Charcoal Stew",cookMethod:"Burnt",cookPercent:100,temp:temp}])),potDetails.innerHTML=`\n\t\t\t${temp+1}Â° (${on}) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t\t<br>\n\t\t\tFull Pot (Charcoal Stew)\n\t\t\t`;else{let pc=JSON.parse(potContents);pc.forEach((p,i,a)=>{p.cookPercent+=.25,p.temp+=1}),potElement.setAttribute("data-contents",JSON.stringify(pc)),potDetails.innerHTML=`\n\t\t\t${temp+1}Â° (${on}) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t\t<br>\n\t\t\tFull Pot\n\t\t\t`}else"null"===potContents&&(potDetails.innerHTML=`\n\t\t${temp+1}Â° (On) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tEmpty Pot\n\t\t`)}async function turnOnPot(){const potDetails=document.getElementById("pot-details"),potElement=document.getElementById("pot-holder"),potContents=potElement.getAttribute("data-contents"),cookingPot=document.getElementById("cooking-pot");let temp=parseInt(potElement.getAttribute("data-temperature"));"null"!==potContents?potDetails.innerHTML=`\n\t\t${temp}Â° (On) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tFull Pot\n\t\t`:"null"===potContents&&(potDetails.innerHTML=`\n\t\t${temp}Â° (On) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tEmpty Pot\n\t\t`),POT_ON=!0,SERVER_DATA.potOn=!0,cookingPot.src="src/cooking_pot.gif",clearInterval(POT_OFF_INTERVAL),info("Pot turned on."),POT_ON_INTERVAL=setInterval(increasePotTemperature,1e3),SERVER_CONNECTION_ACTIVE&&await updateServer()}async function decreasePotTemperature(){const potDetails=document.getElementById("pot-details"),potElement=document.getElementById("pot-holder"),potContents=potElement.getAttribute("data-contents"),on=POT_ON?"On":"Off";let temp=parseInt(potElement.getAttribute("data-temperature"));potElement.setAttribute("data-temperature",String(temp-1)),"null"!==potContents?potDetails.innerHTML=`\n\t\t${temp-1}Â° (${on}) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tFull Pot\n\t\t`:"null"===potContents&&(potDetails.innerHTML=`\n\t\t${temp-1}Â° (${on}) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tEmpty Pot\n\t\t`)}async function turnOffPot(){const potDetails=document.getElementById("pot-details"),potElement=document.getElementById("pot-holder"),cookingPot=document.getElementById("cooking-pot"),potContents=potElement.getAttribute("data-contents");let temp=parseInt(potElement.getAttribute("data-temperature"));"null"!==potContents?potDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tFull Pot\n\t\t`:"null"===potContents&&(potDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pot-toggle" alt="Pot Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePotToggle()"/>\n\t\t<br>\n\t\tEmpty Pot\n\t\t`),POT_ON=!1,SERVER_DATA.potOn=!1,clearInterval(POT_ON_INTERVAL),info("Pot turned off."),cookingPot.src="src/cooking_pot.png",POT_OFF_INTERVAL=setInterval(()=>{},1250),SERVER_CONNECTION_ACTIVE&&await updateServer()}async function handlePotToggle(){POT_ON?turnOffPot():POT_ON||turnOnPot()}async function increasePanTemperature(){const panDetails=document.getElementById("pan-details"),panElement=document.getElementById("pan-holder"),panContentsImage=document.getElementById("pan-contents"),panContents=panElement.getAttribute("data-contents");let temp=parseInt(panElement.getAttribute("data-temperature"));if(panElement.setAttribute("data-temperature",String(temp+1)),"null"!==panContents)if(temp>500&&CONFIG.charcoalization)panElement.setAttribute("data-contents",JSON.stringify({name:"Charcoal",cookMethod:"Burnt",cookPercent:100,temp:temp,price:null})),panContentsImage.src="src/charcoal.png",panContentsImage.style=`filter: brightness(${String(100-(temp-59)/4)}%);`,panDetails.innerHTML=`\n\t\t\t${temp+1}Â° (On) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t\t<br>\n\t\t\tFull Pan (Charcoal)\n\t\t\t`;else{let pc=JSON.parse(panContents);pc.cookPercent+=.25,pc.temp+=1,panElement.setAttribute("data-contents",JSON.stringify(pc)),panContentsImage.style=`filter: brightness(${String(100-(temp-59)/4)}%);`,panDetails.innerHTML=`\n\t\t\t${temp+1}Â° (On) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t\t<br>\n\t\t\tFull Pan (${JSON.parse(panContents).name})\n\t\t\t`}else"null"===panContents&&(panDetails.innerHTML=`\n\t\t${temp+1}Â° (On) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tEmpty Pan\n\t\t`)}async function turnOnPan(){const panDetails=document.getElementById("pan-details"),panElement=document.getElementById("pan-holder"),panContents=panElement.getAttribute("data-contents");let temp=parseInt(panElement.getAttribute("data-temperature"));"null"!==panContents?panDetails.innerHTML=`\n\t\t${temp}Â° (On) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tFull Pan (${JSON.parse(panContents).name})\n\t\t`:"null"===panContents&&(panDetails.innerHTML=`\n\t\t${temp}Â° (On) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tEmpty Pan\n\t\t`),PAN_ON=!0,SERVER_DATA.panOn=!0,clearInterval(PAN_OFF_INTERVAL),info("Pan turned on."),PAN_ON_INTERVAL=setInterval(increasePanTemperature,975),SERVER_CONNECTION_ACTIVE&&await updateServer()}async function decreasePanTemperature(){const panDetails=document.getElementById("pan-details"),panElement=document.getElementById("pan-holder"),panContents=panElement.getAttribute("data-contents"),panContentsImage=document.getElementById("pan-contents");let temp=parseInt(panElement.getAttribute("data-temperature"));panElement.setAttribute("data-temperature",String(temp-1)),"null"!==panContents?(panContentsImage.style=`filter: brightness(${String(100-(temp-59)/4)}%);`,panDetails.innerHTML=`\n\t\t${temp-1}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tFull Pan (${JSON.parse(panContents).name})\n\t\t`):"null"===panContents&&(panDetails.innerHTML=`\n\t\t${temp-1}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tEmpty Pan\n\t\t`)}async function turnOffPan(){const panDetails=document.getElementById("pan-details"),panElement=document.getElementById("pan-holder"),panContents=panElement.getAttribute("data-contents");let temp=parseInt(panElement.getAttribute("data-temperature"));"null"!==panContents?panDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tFull Pan (${JSON.parse(panContents).name})\n\t\t`:"null"===panContents&&(panDetails.innerHTML=`\n\t\t${temp}Â° (Off) <img id="pan-toggle" alt="Pan Toggle Button" src="src/toggle_pan_button.png" width="25px" height="25px" style="position:relative; top:5px; z-index: index 200;" onclick="handlePanToggle()"/>\n\t\t<br>\n\t\tEmpty Pan\n\t\t`),PAN_ON=!1,SERVER_DATA.panOn=!1,clearInterval(PAN_ON_INTERVAL),PAN_OFF_INTERVAL=setInterval(()=>{},1250),info("Pan turned off."),SERVER_CONNECTION_ACTIVE&&await updateServer()}async function handlePanToggle(){PAN_ON?turnOffPan():PAN_ON||turnOnPan()}async function attemptMakeMeal(ingredients){let SELECTED_MEAL;for(let meal of MEALS)meal.ingrNames.every(i=>[].concat(ingredients.map(e=>e.name)).includes(i))&&(SELECTED_MEAL=meal);SELECTED_MEAL=null==SELECTED_MEAL?new Meal({Name:prompt("Meal not recognized, would you like to name it?"),Ingredients:ingredients,Price:0}):SELECTED_MEAL,info(`Attempted to create a meal, name is ${SELECTED_MEAL.name}`),alert("Created meal "+SELECTED_MEAL.name)}async function addIngredientToMealHolder(ingredient){const mealTable=document.getElementById("meal-maker"),mealImageHolder=document.getElementById("meal-contents-image-holder");if(Object.keys(INGREDIENT_IMAGES).includes(ingredient.name)){let ingredientImage=document.createElement("img");ingredientImage.src=INGREDIENT_IMAGES[ingredient.name],ingredientImage.width=27.5,ingredientImage.height=27.5,ingredientImage.alt=`${ingredient.name} Image`,ingredientImage.style=`image-rendering: pixelated; filter: brightness(${100-parseInt(ingredient.cookPercent)}%);`,mealImageHolder.appendChild(ingredientImage)}else if(!Object.keys(INGREDIENT_IMAGES).includes(ingredient.name)){let ingredientImage=document.createElement("img");ingredientImage.src="src/unknown.png",ingredientImage.width=27.5,ingredientImage.height=27.5,ingredientImage.alt=`${ingredient.name} Image`,ingredientImage.style=`image-rendering: pixelated; filter: brightness(${100-parseInt(ingredient.cookPercent)}%);`,mealImageHolder.appendChild(ingredientImage)}}async function handleMealMakeClick(){const mealButton=document.getElementById("meal-maker"),mealIngredientsHolder=document.getElementById("meal-contents-image-holder");let mealIngredients=mealButton.getAttribute("data-ingredients");null!==ACTIVE_INGREDIENT&&"null"!==ACTIVE_INGREDIENT?(MEAL_INGREDIENTS.push(ACTIVE_INGREDIENT),MEAL_INGREDIENTS.length<=3&&addIngredientToMealHolder(ACTIVE_INGREDIENT),ACTIVE_INGREDIENT=null,mealButton.setAttribute("data-ingredients",JSON.stringify(MEAL_INGREDIENTS))):null===ACTIVE_INGREDIENT&&"null"===mealIngredients?alert("Nothing is on the table and you have no ingredient selected!"):null!==ACTIVE_INGREDIENT||"null"===mealIngredients&&"[]"!==mealIngredients||(ACTIVE_INGREDIENT=MEAL_INGREDIENTS[MEAL_INGREDIENTS.length-1],MEAL_INGREDIENTS.pop(MEAL_INGREDIENTS.length-1),mealButton.setAttribute("data-ingredients",JSON.stringify(MEAL_INGREDIENTS)),"IMG"===mealIngredientsHolder.lastElementChild.tagName&&mealIngredientsHolder.lastElementChild.remove())}async function handleWsMessage(f,m){f===createServer?(alert("Created server with pin: "+m.pin),info(`WebSocket cooking server created with pin: ${m.pin}`),await joinServer(m.pin)):f===joinServer&&alert(m.msg)}async function createServer(){const socket=new WebSocket("ws://localhost:4075/");socket.onopen=async()=>{socket.send(JSON.stringify({action:"create_server"}))},socket.onmessage=async evt=>{const data=evt.data;await handleWsMessage(createServer,JSON.parse(data))},SERVER_SOCKET=socket}async function joinServer(pin){const socket=void 0===SERVER_SOCKET?new WebSocket("ws://localhost:4075/"):SERVER_SOCKET;void 0===SERVER_SOCKET?socket.onopen=()=>{socket.send(JSON.stringify({action:"join_server",pin:pin}))}:void 0!==SERVER_SOCKET&&socket.send(JSON.stringify({action:"join_server",pin:pin})),socket.onmessage=async evt=>{const data=evt.data;await handleWsMessage(joinServer,JSON.parse(data))},socket.onmessage=async evt=>{const data=JSON.parse(evt.data);"received_update"===data.action&&await receiveServerUpdates(data)},SERVER_SOCKET=socket,SERVER_PIN=pin,SERVER_CONNECTION_ACTIVE=!0,info(`WebSocket server joined on pin ${pin}`)}async function receiveServerUpdates(parsed){const data=parsed.data,panContents=data.panContents,potContents=data.potContents,panon=data.panOn,poton=data.potOn;panon&&!PAN_ON?await turnOnPan():panon||!0!==PAN_ON||await turnOffPan(),poton&&!1===POT_ON?await turnOnPot():!1===poton&&!0===POT_ON&&await turnOffPot(),"null"!==panContents?await addIngredientToPan(new Ingredient(null,null,null,null,null).fromJson(panContents)):"null"===panContents&&await removePanContents(),await removePotContents();for(let ingr of potContents)await addIngredientToPot(new Ingredient(null,null,null,null,null).fromJson(ingr));info("WebSocket update packet received and processed.")}async function updateServer(){SERVER_SOCKET.send(JSON.stringify({action:"update_server",data:SERVER_DATA,pin:SERVER_PIN}))}async function evenPanTemp(){const panElement=document.getElementById("pan-holder"),panTemp=parseInt(panElement.getAttribute("data-temperature"));PAN_ON||(panTemp<59?await increasePanTemperature():panTemp>63&&await decreasePanTemperature())}async function evenPotTemp(){const potElement=document.getElementById("pot-holder"),potTemp=parseInt(potElement.getAttribute("data-temperature"));POT_ON||(potTemp<59?await increasePotTemperature():potTemp>63&&await decreasePotTemperature())}async function evenActiveIngredientTemp(){null!==ACTIVE_INGREDIENT&&(ACTIVE_INGREDIENT.temp<69?ACTIVE_INGREDIENT.temp+=1:ACTIVE_INGREDIENT.temp>73&&(ACTIVE_INGREDIENT.temp-=1))}async function evenTableContentsTemp(){const table=document.getElementById("meal-maker"),tableContents=table.getAttribute("data-ingredients");if(("[]"!==tableContents||"null"!==tableContents)&&"null"!==tableContents){let tblContents=JSON.parse(tableContents);for(let ingredient of tblContents)ingredient.temp<69?ingredient.temp+=1:ingredient.temp>73&&(ingredient.temp-=1);table.setAttribute("data-ingredients",JSON.stringify(tblContents))}}async function evenTemperatures(){setInterval(evenTableContentsTemp,9750),setInterval(evenPotTemp,15750),setInterval(evenPanTemp,13575),setInterval(evenActiveIngredientTemp,7895)}async function toggleConfig(){const configBox=document.getElementById("config-box"),main=document.getElementById("main");CONFIG_ON?CONFIG_ON&&(main.style="",configBox.style="display:none",CONFIG_ON=!1):(main.style="display:none;",configBox.style="",CONFIG_ON=!0)}async function updateConfig(newConfig){CONFIG=newConfig,localStorage.config=JSON.stringify(CONFIG),document.body.style="background:"+CONFIG.theme.background_color+";"}async function resetConfig(){const configJson=document.getElementById("config-json");CONFIG={normalization:!0,charcoalization:!0,pot_mode:"stew",theme:{background_color:"#ff4d74"}},localStorage.config=JSON.stringify(CONFIG),configJson.innerText=JSON.stringify(CONFIG,null,2),updateConfig(CONFIG)}const onStartup=async()=>{const configJson=document.getElementById("config-json");localStorage.config?(CONFIG=JSON.parse(localStorage.config),configJson.innerText=JSON.stringify(CONFIG,null,2),updateConfig(CONFIG)):localStorage.config||(CONFIG={normalization:!0,charcoalization:!0,pot_mode:"stew",theme:{background_color:"#ff4d74"}},localStorage.config=JSON.stringify(CONFIG),configJson.innerText=JSON.stringify(CONFIG,null,2)),CONFIG.normalization&&await evenTemperatures()};onStartup();