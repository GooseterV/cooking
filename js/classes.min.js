class Purchaseable{constructor(price,name){this.price=price,this.name=name}}class Foodable extends Purchaseable{constructor(price,name,temperature){super(price,name),this.temp=temperature}}class Ingredient extends Foodable{constructor(price,name,temp,cookPercent,cookMethod){super(price,name,temp),this.cookPercent=cookPercent,this.method=cookMethod}asJson(){return{name:this.name,price:this.price,cookPercent:this.cookPercent,cookMethod:this.cookMethod,temp:this.temp}}fromJson(j){return this.name=j.name,this.price=j.price,this.cookPercent=j.cookPercent,this.cookMethod=j.cookMethod,this.temp=j.temp,this}}class Meal extends Foodable{constructor({Name:Name,Ingredients:Ingredients,Price:Price}){super(Price,Name,null),this.ingredients=Ingredients,this.ingrNames=Ingredients.map(v=>v.Name)}}class MealIngredient{constructor({Name:Name,CookPercent:CookPercent,Method:Method,Amount:Amount,Pieces:Pieces}){this.name=Name,this.cookPercent=CookPercent,this.cookMethod=Method,this.pieces=Pieces,this.amount=Amount}}class Upgrade extends Purchaseable{constructor(price,name,use){super(price,name),this.onuse=use}}class Restaurant{constructor(){this.money=0,this.meals=[],this.ingredients=[],this.upgrades=[]}fromJson(j){return this.money=j.money,this.meals=j.meals,this.ingredients=j.ingredients,this.upgrades=j.upgrades,this}toJson(){return{money:this.money,meals:this.meals,ingredients:this.ingredients,upgrades:this.upgrades}}}